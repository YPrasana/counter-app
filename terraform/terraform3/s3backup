# aws_s3_bucket #
resource "aws_s3_bucket" "web_bucket" {
    bucket             = local.s3_bucket_name
    force_destroy      = true

    tags = local.common_tags
}

resource "aws_s3_bucket_ownership_controls" "web_bucket_control" {
  bucket = aws_s3_bucket.web_bucket.id
  rule {
    object_ownership = "ObjectWriter"
  }
}

resource "aws_s3_bucket_acl" "web_bucket_acl" {
  depends_on = [aws_s3_bucket_ownership_controls.web_bucket_control]
  
  bucket = aws_s3_bucket.web_bucket.id
  acl = "public-read"
}

#aws_s3_bucket_object #
resource "aws_s3_object" "website" {
    bucket = aws_s3_bucket.web_bucket.bucket
    key    = "/website/index.html"
    source = "./website/index.html"
    content_type = "text/html"

    tags = local.common_tags
}


resource "aws_s3_object" "webstyle" {
    bucket = aws_s3_bucket.web_bucket.bucket
    key    = "/website/style.css"
    source = "./website/style.css"
    content_type = "text/css"


    tags = local.common_tags
}

resource "aws_s3_object" "webcode" {
    bucket = aws_s3_bucket.web_bucket.bucket
    key    = "/website/app.js"
    source = "./website/app.js"
    content_type = "application/javascript"

    tags = local.common_tags
}

# aws_iam_role this role is used by our instances  #
resource "aws_iam_role" "allow_nginx_s3" {
    name = "allow-nginx-s3"

    assume_role_policy = jsonencode({
        Version = "2012-10-17"
        Statement = [
            {
                Action = "sts:AssumeRole"
                Principal = {
                    Service = "ec2.amazonaws.com"
                }
                Effect = "Allow"
            },
        ]
    })
   
    tags = local.common_tags
}

# aws_iam_role_policy this actually grants permissions to access the s3 bucket and also assign this policy to the aws_iam_role#
resource "aws_iam_policy" "allow_s3_all" {
    name = "allow-s3-all"
    #role = aws_iam_role.allow_nginx_s3.name

    policy = jsonencode({
        Version = "2012-10-17"
        Statement = [
            {
                Sid = ""
                Action = "s3:GetObject"
                Effect = "Allow"
                Resource = [
                    "arn:aws:s3:::${local.s3_bucket_name}/*"
                ]
            },
        ]

    })
}



# aws_iam_instance_profile we assign this profile to our ec2 instances#
resource "aws_iam_instance_profile" "nginx_profile" {
    name = "nginx_profile"
    role = aws_iam_role.allow_nginx_s3.name
    

    tags = local.common_tags
}